// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {

  provider  = "postgresql"

  url  	    = env("DATABASE_URL")

}



model StartupValidation {
  id                 String   @id @default(cuid())
  userId             String
  startupId          String
  answers            Json     // Store the question answers
  scores             Json     // Store area scores
  analysisNotes      String?  @db.Text
  keyStrengths       Json?    // Array of strings
  potentialChallenges Json?   // Array of strings
  recommendations    Json?    // Object containing pitchImprovements and nextSteps
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  startup            Startup  @relation(fields: [startupId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([startupId])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  startups      Startup[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  validations       StartupValidation[]
}

model Startup {
  id          String   @id @default(cuid())
  name        String
  industry    String
  sector      String
  stage       String
  description String   @db.Text
  capital     Float
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  matches     Match[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  validations       StartupValidation[]
  // Add this line for the opposite relation
  emailCampaigns EmailCampaign[]
  
}

model Match {
  id                String   @id @default(cuid())
  vcName            String
  contactInfo       String
  minimumInvestment Float
  sectors           String
  website           String
  startupId         String
  startup           Startup  @relation(fields: [startupId], references: [id])
  fitScore          Int
  matchReason       String @db.Text
  notablePortfolio  String
  createdAt         DateTime @default(now())
  // analysisNotes     String @db.Text
  // keyStrengths      String @db.Text
  // potentialChallenges String @db.Text
  // pitchImprovements  String @db.Text
  // nextSteps         String @db.Text
   // Add this line for the opposite relation
  investorEmails    InvestorEmail[]

  @@index([startupId])
}

model InvestorEmail {
  id        String   @id @default(cuid())
  matchId   String
  email     String
  status    String   @default("pending") // pending, valid, invalid
  createdAt DateTime @default(now())
  match     Match    @relation(fields: [matchId], references: [id])

  @@index([matchId])
  @@unique([matchId, email]) 
}

model EmailCampaign {
  id          String    @id @default(cuid())
  startupId   String
  subject     String
  content     String    @db.Text
  senderEmail String
  status      String    @default("draft") // draft, sent
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  startup     Startup   @relation(fields: [startupId], references: [id])
  verificationToken String?
  verifiedAt       DateTime?

  @@index([startupId])
}

model RateLimitAttempt {
  id        String   @id @default(cuid())
  key       String
  timestamp DateTime @default(now())

  @@index([key, timestamp])
}

model UserMapping {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  userId    String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clerkId])
  @@index([userId])
}